params {
    /* Input and output options */
    genomes = "data/*.fa"             // input contigs or genomes in FASTA or GFF3 format (see 'annotate')
    annotate = true                   // annotate using prokka (if false, input genomes must be in GFF3 format)
    outdir = "./results"              // output directory
    proteins = "none"                 // FASTA file of trusted proteins to first annotate from (if annotate = true)

    /* General options */
    mode = "Bacteria"                 // mode: Archaea, Bacteria, Mitochondria, Viruses"

    /* Roary options */
    min_ident = 95                    // minimum percentage identity
    min_prev_core = 99                // minimum prevalence of a gene to be consideded core

    /* Core tree and RAxML options */
    skip_core_tree = false            // if true, skip tree inference with RAxML from the core alignment. Use
                                      // the less accurate tree inferred from the presence/absence 
                                      // accessory genes profiles.
    raxml_mode = "default"            // RAxML mode , "default": default RAxML tree search algorithm or
                                      // "rbs": rapid bootstrapping full analysis
    raxml_nsearch = 10                // "default" mode only: number of inferences on the original alignment using
                                      // distinct randomized MP trees (if Â­10 is specified, RAxML will compute 
                                      // 10 distinct ML trees starting from 10 distinct randomized maximum parsimony
                                      // starting trees.)
    raxml_nboot = "autoMRE"           // "rbs" mode only: bootstrap convergence criterion or number of bootstrap 
                                      // searches (see -I and -#/-N options in RAxML)
    
    /* Limits */
    max_cpus = 16
    max_memory = 64.GB
    max_time = 48.h
}


/* Docker options */
docker.enabled = true
docker.runOptions = '-u \$(id -u):\$(id -g)'


/* Import process configuration file*/
includeConfig 'process.config'


/* Manifest */
manifest {
    homePage = 'metashot.github.io'
    description = 'Pan genome analysis of closely related prokariotic genomes'
    mainScript = 'main.nf'
    version = '1.2.0'
}


/* Functions */
def check_max(obj, max) {
    // see https://github.com/nextflow-io/nextflow/issues/640
    if( obj instanceof nextflow.util.MemoryUnit ) {
        try {
            def max_type = max as nextflow.util.MemoryUnit
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max memory '${max}', using default value: $obj"
            return obj
        }   
    }
    if( obj instanceof nextflow.util.Duration ) {
        try {
            def max_type = max as nextflow.util.Duration
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max time '${max}', using default value $obj"
            return obj
        }         
    }
    if( obj instanceof Integer ) {
        try {
            return Math.min(obj, max as int)
        }   
        catch( all ) {
            println "ERROR: invalid max cpus '${max}', using default value $obj"
            return obj
        }         
    }    
}
